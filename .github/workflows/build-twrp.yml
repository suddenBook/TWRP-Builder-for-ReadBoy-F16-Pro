# 工作流的名称
name: Build TWRP

# 触发条件：当手动点击 "Run workflow" 按钮时触发
on:
  workflow_dispatch:
    inputs:
      # 定义一个输入框，让你在运行时填写设备代号
      DEVICE_CODENAME:
        description: '设备代号 (例如: whyred)'
        required: true
      # 定义一个输入框，让你在运行时填写设备品牌
      DEVICE_BRAND:
        description: '设备品牌 (例如: xiaomi)'
        required: true
      # 定义一个下拉菜单，让你选择构建目标
      BUILD_TARGET:
        description: '构建目标 (A/B 分区设备选 bootimage)'
        required: true
        type: choice
        options:
        - recoveryimage
        - bootimage
        default: recoveryimage

jobs:
  build:
    # 任务名称
    name: Build TWRP for ${{ github.event.inputs.DEVICE_CODENAME }}
    # 运行环境：使用最新的 Ubuntu 系统
    runs-on: ubuntu-22.04

    steps:
      # 步骤 1: 检出你的仓库代码
      - name: Checkout
        uses: actions/checkout@v4

      # 步骤 2: 缓存 TWRP 源码
      - name: Cache TWRP sources
        uses: actions/cache@v3
        with:
          path: ~/twrp_sources/.repo
          key: ${{ runner.os }}-twrp-omni-10

      # 步骤 3: 安装编译依赖
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick repo lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev

      # 步骤 4: 设置 Java 8 环境
      - name: Setup Java 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      # 新增步骤 5: 释放磁盘空间 (重要!)
      # GitHub Actions 免费 runner 的磁盘空间有限。
      # AOSP 编译会占用大量空间，所以我们需要删除一些预装但不需要的软件来腾出空间。
      - name: Free up disk space
        run: |
          echo "Initial free space:"
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          echo "Free space after cleanup:"
          df -h

      # 步骤 6: 同步 TWRP 源码
      - name: Sync TWRP sources
        run: |
          mkdir -p ~/twrp_sources
          cd ~/twrp_sources
          repo init -u https://github.com/minimal-manifest-twrp/platform_manifest_twrp_omni.git -b twrp-10.0-deprecated --depth=1
          repo sync -c --force-sync --no-clone-bundle --no-tags -j$(nproc --all)

      # 步骤 7: 复制设备树到源码目录
      - name: Copy device tree
        run: |
          BRAND=${{ github.event.inputs.DEVICE_BRAND }}
          DEVICE=${{ github.event.inputs.DEVICE_CODENAME }}
          mkdir -p ~/twrp_sources/device/$BRAND
          cp -r $GITHUB_WORKSPACE/device/$BRAND/$DEVICE ~/twrp_sources/device/$BRAND/

      # 步骤 8: 开始编译
      - name: Build
        run: |
          cd ~/twrp_sources
          export ALLOW_MISSING_DEPENDENCIES=true
          source build/envsetup.sh
          lunch omni_${{ github.event.inputs.DEVICE_CODENAME }}-eng
          mka ${{ github.event.inputs.BUILD_TARGET }} -j$(nproc --all)

      # 步骤 9: 上传编译产物
      - name: Upload recovery image
        uses: actions/upload-artifact@v4
        with:
          name: twrp-${{ github.event.inputs.DEVICE_CODENAME }}
          path: ~/twrp_sources/out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/${{ github.event.inputs.BUILD_TARGET }}.img
